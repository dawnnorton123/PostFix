import java.util.Stack;// import the stacks

public class PostfixEval {
	
	private String iS;// private String for infix string
	private Stack s;// private Character to put into the stack
	public PostfixEval(String iString){
		iS = iString; //iS = new String
	s = new Stack();// s = new Stack
	String outputString = " ";// outputting the correct version of the infix version
	boolean fI = false; //checking to see if it is the first item 
	for(int i=0; i < iS.length(); i++)
	{
		char curChar = iS.charAt(i);//char is the current char. and iS is being passed
	    if(!isOperator(curChar)){
	    	outputString += Character.toString(curChar);
	    	if(i == (iS.length()-1)){
	    		while(!s.empty()){
	    			outputString += s.pop();
	    		}
	    }
	   
	    } else{
	    	if(fI){
	    		if(pMin(curChar) && pMin ((Character)s.peek())){
	    			outputString += s.pop();
	    			s.push(curChar);
	    			if(i == (iS.length()-1)){
	    				while(!s.empty()){
	    					outputString += s.pop();
	    				}
	    			}
	    	}else if(mDiv(curChar) && mDiv((Character)s.peek())){
	    		outputString += s.pop();
	    		s.push(curChar);
	    		if(i == (iS.length()-1)){
    				while(!s.empty()){
    					outputString += s.pop();
    				}
    			}
	    }else if(pMin(curChar) && mDiv((Character)s.peek())){
	    	outputString += s.pop();
    		s.push(curChar);
    		if(i == (iS.length()-1)){
				while(!s.empty()){
					outputString += s.pop();
				}
			}
   }  	else if(mDiv(curChar) && pMin((Character)s.peek())){
	   s.push(curChar);
   if(i == (iS.length()-1)){
		while(!s.empty()){
			outputString += s.pop();
		}
	}
}else{
	outputString += Character.toString(curChar);
	if(i == (iS.length()-1)){
		while(!s.empty()){
			outputString += s.pop();
		}
	}
}
}else{
	s.push(curChar);
	fI = true;
}	
}
	}
System.out.println(outputString);
	}
public boolean isOperator(char op){
	switch(op){ // switch statement
	case '+':
		return true;
	case '-':
		return true;
	case '/':
		return true;
	case '*':
		return true;
	case '^':
		return true;
	default:
		return false;// if none of these cases match then it will return false
	}
}
public boolean pMin(char op){
	switch(op){
case '+':
	return true;
case '-':
	return true;
default:
	return false;
}
}

public boolean mDiv(char op){
	switch(op){
case '*':
	return true;
case '/':
	return true;
default:
	return false;
}
}
}











